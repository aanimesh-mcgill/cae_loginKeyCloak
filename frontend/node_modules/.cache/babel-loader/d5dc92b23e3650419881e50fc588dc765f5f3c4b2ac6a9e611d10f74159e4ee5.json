{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aanime\\\\cae_login\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { useKeycloak } from '@react-keycloak/web';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  var _user$realm_access;\n  const {\n    keycloak,\n    initialized\n  } = useKeycloak();\n\n  // Parse user info and roles from Keycloak token\n  const user = (keycloak === null || keycloak === void 0 ? void 0 : keycloak.tokenParsed) || null;\n  const loading = !initialized;\n  const isAuthenticated = !!(keycloak !== null && keycloak !== void 0 && keycloak.authenticated);\n  console.log('AuthContext:', {\n    keycloak,\n    keycloakAuthenticated: keycloak === null || keycloak === void 0 ? void 0 : keycloak.authenticated,\n    tokenParsed: keycloak === null || keycloak === void 0 ? void 0 : keycloak.tokenParsed,\n    user,\n    loading,\n    isAuthenticated\n  });\n\n  // Keycloak roles are in realm_access.roles or resource_access[client].roles\n  const roles = (user === null || user === void 0 ? void 0 : (_user$realm_access = user.realm_access) === null || _user$realm_access === void 0 ? void 0 : _user$realm_access.roles) || [];\n  const hasRole = role => roles.includes(role);\n\n  // Permissions can be mapped to roles or custom claims as needed\n  const hasPermission = permission => {\n    // Example: map permissions to roles\n    const permissions = {\n      'Admin': ['content:read', 'content:create', 'content:update', 'content:delete', 'users:read', 'users:update', 'users:delete', 'system:admin'],\n      'Editor': ['content:read', 'content:create', 'content:update'],\n      'Viewer': ['content:read']\n    };\n    for (const role of roles) {\n      var _permissions$role;\n      if ((_permissions$role = permissions[role]) !== null && _permissions$role !== void 0 && _permissions$role.includes(permission)) return true;\n    }\n    return false;\n  };\n  const login = () => keycloak === null || keycloak === void 0 ? void 0 : keycloak.login();\n  const logout = () => keycloak === null || keycloak === void 0 ? void 0 : keycloak.logout();\n  const value = {\n    user,\n    loading,\n    error: null,\n    login,\n    logout,\n    hasPermission,\n    hasRole,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"OgqNqA9n/+FM7bDQd9Rvz2CUjoM=\", false, function () {\n  return [useKeycloak];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useKeycloak","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","_user$realm_access","keycloak","initialized","user","tokenParsed","loading","isAuthenticated","authenticated","console","log","keycloakAuthenticated","roles","realm_access","hasRole","role","includes","hasPermission","permission","permissions","_permissions$role","login","logout","value","error","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aanime/cae_login/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\r\nimport { useKeycloak } from '@react-keycloak/web';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const { keycloak, initialized } = useKeycloak();\r\n\r\n  // Parse user info and roles from Keycloak token\r\n  const user = keycloak?.tokenParsed || null;\r\n  const loading = !initialized;\r\n  const isAuthenticated = !!keycloak?.authenticated;\r\n\r\n  console.log('AuthContext:', {\r\n    keycloak,\r\n    keycloakAuthenticated: keycloak?.authenticated,\r\n    tokenParsed: keycloak?.tokenParsed,\r\n    user,\r\n    loading,\r\n    isAuthenticated\r\n  });\r\n\r\n  // Keycloak roles are in realm_access.roles or resource_access[client].roles\r\n  const roles = user?.realm_access?.roles || [];\r\n\r\n  const hasRole = (role) => roles.includes(role);\r\n\r\n  // Permissions can be mapped to roles or custom claims as needed\r\n  const hasPermission = (permission) => {\r\n    // Example: map permissions to roles\r\n    const permissions = {\r\n      'Admin': ['content:read', 'content:create', 'content:update', 'content:delete', 'users:read', 'users:update', 'users:delete', 'system:admin'],\r\n      'Editor': ['content:read', 'content:create', 'content:update'],\r\n      'Viewer': ['content:read']\r\n    };\r\n    for (const role of roles) {\r\n      if (permissions[role]?.includes(permission)) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const login = () => keycloak?.login();\r\n  const logout = () => keycloak?.logout();\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error: null,\r\n    login,\r\n    logout,\r\n    hasPermission,\r\n    hasRole,\r\n    isAuthenticated\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}